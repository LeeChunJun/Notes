// 1.Binder 核心机制分析，揭秘跨进程的实现原理

为什么增加 Binder 机制

    常见的进程间通信机制：管道、消息队列、共享内存和 Socket

    原因：基于性能、稳定性和安全性几方面考虑
    性能——
    IPC                     数据拷贝次数
    共享内存                 0
    Binder                   1
    Socket/管道/消息队列      2

    稳定性——
    Binder：基于 C/S 架构，客户端（Client）有什么需求就丢给服务端（Server）去完成
        架构清晰、职责明确又相互独立，自然稳定性更好。
    共享内存：虽然无需拷贝，但是控制复杂，难以使用。
    从稳定性角度，Binder 机制是优于内存共享的。

    安全性——
    传统的 IPC 没有任何安全措施，安全依赖上层协议来确保

    传统的 IPC 方法无法获得对方可靠的进程用户 ID/进程 ID（UID/PID），从而无法鉴别对方身份。

    传统的 IPC 只能由用户在数据包中填入 UID/PID，容易被恶意程序利用。

    传统的 IPC 访问接入点是开发的，无法阻止恶意程序通过猜测接收方地址获得链接。

    Binder 即支持实名 Binder，又支持匿名 Binder，安全性高
// 1.移动技术简介

原生开发：
1)可访问平台全部功能（GPS、摄像头）；
2)速度快、性能高、可以实现复杂动画及绘制，整体用户体验好；
3)平台特定，开发成本高；不同平台必须维护不同代码，人力成本随之变大；
4)内容固定，动态化弱，大多数情况下，有新功能更新时只能发版；

跨平台技术简介：
1)H5+原生（Cordova、Ionic、微信小程序）
2)JavaScript开发+原生渲染 （React Native、Weex、快应用）
3)自绘UI+原生(QT for mobile、Flutter)

H5+原生混合开发：

    将APP的一部分需要动态变动的内容通过H5来实现，通过原生的网页加载控件
    WebView (Android)或WKWebView（iOS）来加载（以后若无特殊说明，我们
    用WebView来统一指代android和iOS中的网页加载控件）。我们称这种h5+原
    生的开发模式为混合开发 ，采用混合模式开发的APP我们称之为混合应用或
    Hybrid APP ，如果一个应用的大多数功能都是H5实现的话，我们称其为Web APP 。

    混合开发中，H5代码是运行在WebView中，而WebView实质上就是一个浏览器内核，
    其JavaScript依然运行在一个权限受限的沙箱中，所以对于大多数系统能力都没有
    访问权限，如无法访问文件系统、不能使用蓝牙等。

    混合框架一般都会在原生代码中预先实现一些访问系统能力的API， 然后暴露给
    WebView以供JavaScript调用，这样一来，WebView就成为了JavaScript与原生API
    之间通信的桥梁，主要负责JavaScript与原生之间传递调用消息，而消息的传递必须
    遵守一个标准的协议，它规定了消息的格式与含义，我们把依赖于WebView的用于在
    JavaScript与原生之间通信并实现了某种消息传输协议的工具称之为WebView 
    JavaScript Bridge, 简称 JsBridge，它也是混合开发框架的核心。

React Native、Weex及快应用：

    React是一个响应式的Web框架，包含两个重要的概念：DOM树与响应式编程。
    1)DOM树与控件树：
        文档对象模型（Document Object Model，简称DOM），一种独立于平台和语言的
        方式访问和修改一个文档的内容和结构。DOM操作就是指直接来操作渲染树（或控件树），
        因此，可以看到其实DOM树和控件树是等价的概念，只不过前者常用于Web开发中，
        而后者常用于原生开发中。
        
    2)响应式编程：
        状态改变则UI随之自动改变，而React框架本身就是响应用户状态改变的事件而执行重新
        构建用户界面的工作，这就是典型的响应式编程范式。

        首先，开发者只需关注状态转移（数据），当状态发生变化，React框架会自动根据新的状态重新构建UI。
        其次，React框架在接收到用户状态改变通知后，会根据当前渲染树，结合最新的状态改变，通过Diff算法，
        计算出树中变化的部分，然后只更新变化的部分（DOM操作），从而避免整棵树重构，提高性能。

        上述第二步中，状态变化后React框架并不会立即去计算并渲染DOM树的变化部分，相反，React会在DOM
        的基础上建立一个抽象层，即虚拟DOM树，对数据和状态所做的任何改动，都会被自动且高效的同步到
        虚拟DOM，最后再批量同步到真实DOM中，而不是每次改变都去操作一下DOM。

        1.如果DOM只是外观风格发生变化，如颜色变化，会导致浏览器重绘界面。
        2.如果DOM树的结构发生变化，如尺寸、布局、节点隐藏等导致，浏览器就需要回流（及重新排版布局）。

        浏览器的重绘和回流都是比较昂贵的操作，如果每一次改变都直接对DOM进行操作，这会带来性能问题，而批量操作只会触发一次DOM更新。

    React Native：
    React Native 是 React 在原生移动应用平台的衍生产物，React中虚拟DOM最终会映射为浏览器DOM树，
    而RN中虚拟DOM会通过 JavaScriptCore 映射为原生控件树。

    JavaScriptCore 是一个JavaScript解释器，它在React Native中主要有两个作用：
    1.为JavaScript提供运行环境。
    2.是JavaScript与原生应用之间通信的桥梁，作用和JsBridge一样，事实上，在iOS中，很多JsBridge的实现都是基于 JavaScriptCore 。

    RN中将虚拟DOM映射为原生控件的过程中分两步：
    1.布局消息传递；将虚拟DOM布局信息传递给原生；
    2.原生根据布局信息通过对应的原生控件渲染控件树；

    相对于混合应用，由于React Native是原生控件渲染，所以性能会比混合应用中H5好很多，同时React Native是Web开发技术栈，
    也只需维护一份代码，同样是跨平台框架。

    Weex：
    Weex支持Vue语法和Rax语法，Rax 的 DSL(Domain Specific Language) 语法是基于 React JSX 语法而创造。与 React 不同，
    在 Rax 中 JSX 是必选的，它不支持通过其它方式创建组件，所以学习 JSX 是使用 Rax 的必要基础。而React Native只支持JSX语法。

    快应用：
    采用JavaScript语言开发，原生控件渲染，与React Native和Weex相比主要有两点不同：
    1.快应用自身不支持Vue或React语法，其采用原生JavaScript开发，其开发框架和微信小程序很像，值得一提的是小程序目前已经可以
      使用Vue语法开发（mpvue），从原理上来讲，Vue的语法也可以移植到快应用上。
    2.React Native和Weex的渲染/排版引擎是集成到框架中的，每一个APP都需要打包一份，安装包体积较大；
      而快应用渲染/排版引擎是集成到ROM中的，应用中无需打包，安装包体积小，正因如此，快应用才能在保证性能的同时做到快速分发。

    JavaScript开发+原生渲染的方式：
    1)采用Web开发技术栈，社区庞大、上手快、开发成本相对较低。
    2)原生渲染，性能相比H5提高很多。
    3)动态化较好，支持热更新。
    4)渲染时需要JavaScript和原生之间通信，在有些场景如拖动可能会因为通信频繁导致卡顿。
    5)JavaScript为脚本语言，执行时需要JIT(Just In Time)，执行效率和AOT(Ahead Of Time)代码仍有差距。
    6)由于渲染依赖原生控件，不同平台的控件需要单独维护，并且当系统更新时，社区控件可能会滞后；除此之外，其控件系统也会受到
      原生UI系统限制，例如，在Android中，手势冲突消歧规则是固定的，这在使用不同人写的控件嵌套时，手势冲突问题将会变得非常棘手。

自绘UI+原生：QT Mobile

    通过在不同平台实现一个统一接口的渲染引擎来绘制UI，而不依赖系统原生控件，所以可以做到不同平台UI的一致性。
    注意，自绘引擎解决的是UI的跨平台问题，如果涉及其它系统能力调用，依然要涉及原生开发。

    1)性能高；由于自绘引擎是直接调用系统API来绘制UI，所以性能和原生控件接近。
    2)灵活、组件库易维护、UI外观保真度和一致性高；由于UI渲染不依赖原生控件，也就不需要根据不同平台的控件单独维护一套组件库，所以代码容易维护。
      由于组件库是同一套代码、同一个渲染引擎，所以在不同平台，组件显示外观可以做到高保真和高一致性；另外，由于不依赖原生控件，也就不会受原生
      布局系统的限制，这样布局系统会非常灵活。
    3)动态性不足；为了保证UI绘制性能，自绘UI系统一般都会采用AOT模式编译其发布包，所以应用发布后，不能像Hybrid和RN那些使用JavaScript（JIT）
      作为开发语言的框架那样动态下发代码。
    4)开发效率低：QT使用C++作为其开发语言，而编程需要效率是直接会影响APP开发效率的，C++作为一门静态语言，在UI开发方面灵活性不及JavaScript
      这样的动态语言，另外，C++需要开发者手动去管理内存分配，没有JavaScript及Java中垃圾回收（GC）的机制。

Flutter：
    Flutter和QT mobile一样，都没有使用原生控件，相反都实现了一个自绘引擎，使用自身的布局、绘制系统。

三种跨平台技术：
    1)H5+原生                   WebView渲染     性能一般    开发效率高        支持动态化      框架代表：Cordova、Ionic
    2)JavaScript+原生渲染       原生控件渲染     性能好      开发效率中        支持动态化      框架代表：RN、Weex
    3)自绘UI+原生               调用系统API渲染  性能好      Flutter高, QT低   默认不支持      框架代表：QT、Flutter

// 2.Flutter简介

跨平台自绘引擎：

  Flutter既不使用WebView，也不使用操作系统的原生控件。 相反，Flutter使用自己的高性能渲染引擎来绘制widget。这样不仅可以保证在Android和iOS上UI
  的一致性，而且也可以避免对原生控件依赖而带来的限制及高昂的维护成本。

  Flutter使用Skia作为其2D渲染引擎，Skia是Google的一个2D图形处理函数库，包含字型、坐标转换，以及点阵图都有高效能且简洁的表现，Skia是跨平台的，
  并提供了非常友好的API，目前Google Chrome浏览器和Android均采用Skia作为其绘图引擎。

  默认支持 iOS、Android、Fuchsia 以及 Web开发（Flutter for web）和PC开发

高性能：
  1)Flutter APP 采用 Dart 语言开发。Dart 在 JIT（即时编译）模式下，速度与 JavaScript基本持平。
    同时， Dart支持 AOT ，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。
  2)Flutter 使用自己的渲染引擎来绘制UI，布局数据等由 Dart 语言直接控制，所以在布局过程中不需要像 RN 那样要在 JavaScript 和 Native 之间通信，
    这在一些滑动和拖动的场景下具有明显优势，因为在滑动和拖动过程往往都会引起布局发生变化，所以 JavaScript 需要和 Native 之间不停的同步布局信息，
    这和在浏览器中要 JavaScript 频繁操作 DOM 所带来的问题是相同的，都会带来比较可观的性能开销。

采用Dart语言开发：

  1)JIT：
    解释执行的则是一句一句边翻译边运行，通常将这种类型称为JIT（Just-in-time）即“即时编译”。
  2)AOT：
    静态编译的程序在执行前全部被翻译为机器码，通常将这种类型称为AOT （Ahead of time）即 “提前编译”；
  
  需要注意的是 JIT 和 AOT 指的是程序运行方式，和编程语言并非强关联的，有些语言既可以以 JIT 方式运行也可以以 AOT 方式运行，如 Java、Python，它们
  可以在第一次执行时编译成中间字节码、然后在之后执行时可以直接执行字节码

Flutter为什么选择Dart语言：

  1)开发效率高
    基于 JIT 的快速开发周期：Flutter在开发阶段采用 JIT 模式，这样就避免了每次改动都要进行编译，极大的节省了开发时间；
    基于 AOT 的发布包: Flutter在发布时可以通过 AOT 生成高效的 ARM 代码以保证应用性能。而 JavaScript 则不具有这个能力。

  2)高性能
    Flutter中需要能够在每个动画帧中运行大量的代码。这意味着需要一种既能提供高性能的语言，而不会出现会丢帧的周期性暂停。

  3)快速内存分配
  4)类型安全
    Dart本身就支持静态类型

Flutter框架结构：

  1)Flutter Framework：
    这是一个纯 Dart 实现的 SDK ，它实现了一套基础库，自底向上。

    底下两层（ Foundation 和 Animation、Painting、Gestures）在Google的一些视频中被合并为一个 dart UI 层，对应的是 Flutter 中的 dart:ui 包，
    它是 Flutter 引擎暴露的底层 UI 库，提供动画、手势及绘制能力。

    Rendering 层，这一层是一个抽象的布局层，它依赖于 dart UI 层，Rendering 层会构建一个 UI 树，当 UI 树有变化时，会计算出有变化的部分，然后
    更新 UI 树，最终将 UI 树绘制到屏幕上，这个过程类似于 React 中的虚拟 DOM。Rendering 层可以说是 Flutter UI 框架最核心的部分，它除了确定每个
    UI 元素的位置、大小之外还要进行坐标变换、绘制(调用底层dart:ui)。

    Widgets 层是 Flutter 提供的的一套基础组件库，在基础组件库之上，Flutter 还提供了 Material 和 Cupertino 两种视觉风格的组件库。而我们 Flutter 
    开发的大多数场景，只是和这两层打交道。

  2)Flutter Engine：
    这是一个纯 C++实现的 SDK，其中包括了 Skia引擎、Dart运行时、文字排版引擎等。在代码调用 dart:ui库时，调用最终会走到Engine层，然后实现真正的绘制逻辑。

